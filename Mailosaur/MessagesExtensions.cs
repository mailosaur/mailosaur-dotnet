// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Mailosaur
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Messages.
    /// </summary>
    public static partial class MessagesExtensions
    {
            /// <summary>
            /// Retrieve a message
            /// </summary>
            /// <remarks>
            /// Retrieves the detail for a single email message. Simply supply the unique
            /// identifier for the required message.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the email message to be retrieved.
            /// </param>
            public static Message Get(this IMessages operations, System.Guid id)
            {
                return operations.GetAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve a message
            /// </summary>
            /// <remarks>
            /// Retrieves the detail for a single email message. Simply supply the unique
            /// identifier for the required message.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the email message to be retrieved.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Message> GetAsync(this IMessages operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a message
            /// </summary>
            /// <remarks>
            /// Permanently deletes a message. This operation cannot be undone. Also
            /// deletes any attachments related to the message.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the message to be deleted.
            /// </param>
            public static void Delete(this IMessages operations, System.Guid id)
            {
                operations.DeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a message
            /// </summary>
            /// <remarks>
            /// Permanently deletes a message. This operation cannot be undone. Also
            /// deletes any attachments related to the message.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the message to be deleted.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IMessages operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List all messages
            /// </summary>
            /// <remarks>
            /// Returns a list of your messages in summary form. The summaries are returned
            /// sorted by received date, with the most recently-received messages appearing
            /// first.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='server'>
            /// The identifier of the server hosting the messages.
            /// </param>
            /// <param name='page'>
            /// Used in conjunction with `itemsPerPage` to support pagination.
            /// </param>
            /// <param name='itemsPerPage'>
            /// A limit on the number of results to be returned per page. Can be set
            /// between 1 and 1000 items, the default is 50.
            /// </param>
            public static MessageListResult List(this IMessages operations, string server, int? page = default(int?), int? itemsPerPage = default(int?))
            {
                return operations.ListAsync(server, page, itemsPerPage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all messages
            /// </summary>
            /// <remarks>
            /// Returns a list of your messages in summary form. The summaries are returned
            /// sorted by received date, with the most recently-received messages appearing
            /// first.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='server'>
            /// The identifier of the server hosting the messages.
            /// </param>
            /// <param name='page'>
            /// Used in conjunction with `itemsPerPage` to support pagination.
            /// </param>
            /// <param name='itemsPerPage'>
            /// A limit on the number of results to be returned per page. Can be set
            /// between 1 and 1000 items, the default is 50.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MessageListResult> ListAsync(this IMessages operations, string server, int? page = default(int?), int? itemsPerPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(server, page, itemsPerPage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete all messages
            /// </summary>
            /// <remarks>
            /// Permanently deletes all messages held by the specified server. This
            /// operation cannot be undone. Also deletes any attachments related to each
            /// message.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='server'>
            /// The identifier of the server to be emptied.
            /// </param>
            public static void DeleteAll(this IMessages operations, string server)
            {
                operations.DeleteAllAsync(server).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete all messages
            /// </summary>
            /// <remarks>
            /// Permanently deletes all messages held by the specified server. This
            /// operation cannot be undone. Also deletes any attachments related to each
            /// message.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='server'>
            /// The identifier of the server to be emptied.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAllAsync(this IMessages operations, string server, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteAllWithHttpMessagesAsync(server, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Search for messages
            /// </summary>
            /// <remarks>
            /// Returns a list of messages matching the specified search criteria, in
            /// summary form. The messages are returned sorted by received date, with the
            /// most recently-received messages appearing first.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='server'>
            /// The identifier of the server hosting the messages.
            /// </param>
            /// <param name='criteria'>
            /// The search criteria to match results against.
            /// </param>
            /// <param name='page'>
            /// Used in conjunction with `itemsPerPage` to support pagination.
            /// </param>
            /// <param name='itemsPerPage'>
            /// A limit on the number of results to be returned per page. Can be set
            /// between 1 and 1000 items, the default is 50.
            /// </param>
            public static MessageListResult Search(this IMessages operations, string server, SearchCriteria criteria, int? page = default(int?), int? itemsPerPage = default(int?))
            {
                return operations.SearchAsync(server, criteria, page, itemsPerPage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Search for messages
            /// </summary>
            /// <remarks>
            /// Returns a list of messages matching the specified search criteria, in
            /// summary form. The messages are returned sorted by received date, with the
            /// most recently-received messages appearing first.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='server'>
            /// The identifier of the server hosting the messages.
            /// </param>
            /// <param name='criteria'>
            /// The search criteria to match results against.
            /// </param>
            /// <param name='page'>
            /// Used in conjunction with `itemsPerPage` to support pagination.
            /// </param>
            /// <param name='itemsPerPage'>
            /// A limit on the number of results to be returned per page. Can be set
            /// between 1 and 1000 items, the default is 50.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MessageListResult> SearchAsync(this IMessages operations, string server, SearchCriteria criteria, int? page = default(int?), int? itemsPerPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SearchWithHttpMessagesAsync(server, criteria, page, itemsPerPage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Wait for a specific message
            /// </summary>
            /// <remarks>
            /// Returns as soon as a message matching the specified search criteria is
            /// found. This is the most efficient method of looking up a message.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='server'>
            /// The identifier of the server hosting the message.
            /// </param>
            /// <param name='criteria'>
            /// The search criteria to use in order to find a match.
            /// </param>
            public static Message WaitFor(this IMessages operations, string server, SearchCriteria criteria, int timeout = 15)
            {
                return operations.WaitForAsync(server, criteria, default(CancellationToken), timeout).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Wait for a specific message
            /// </summary>
            /// <remarks>
            /// Returns as soon as a message matching the specified search criteria is
            /// found. This is the most efficient method of looking up a message.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='server'>
            /// The identifier of the server hosting the message.
            /// </param>
            /// <param name='criteria'>
            /// The search criteria to use in order to find a match.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Message> WaitForAsync(this IMessages operations, string server, SearchCriteria criteria, CancellationToken cancellationToken = default(CancellationToken), int timeout = 15)
            {
                using (var _result = await operations.WaitForWithHttpMessagesAsync(server, criteria, null, cancellationToken, timeout).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
